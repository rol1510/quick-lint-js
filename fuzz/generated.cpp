/************************************************/
/* This file was autogenerated by create_cpp.py */
/************************************************/

#include "generated.h"

#define MAX_CHILD_COUNT 3

void ProdExpr::produce(uint8_t byte, quick_lint_js::Memory_Resource &memory,
                       std::vector<Node *> &queue) {
  this->byte = byte;
  if (byte < 128) {
    {
      ProdValue *node = memory.new_object<ProdValue>();
      QLJS_ASSERT(this->num_children < MAX_CHILD_COUNT - 1);
      this->children[this->num_children++] = node;
      queue.push_back(node);
    }
    {
      ProdOperator *node = memory.new_object<ProdOperator>();
      QLJS_ASSERT(this->num_children < MAX_CHILD_COUNT - 1);
      this->children[this->num_children++] = node;
      queue.push_back(node);
    }
    {
      ProdValue *node = memory.new_object<ProdValue>();
      QLJS_ASSERT(this->num_children < MAX_CHILD_COUNT - 1);
      this->children[this->num_children++] = node;
      queue.push_back(node);
    }
  } else if (byte < 256) {
    {
      ProdValue *node = memory.new_object<ProdValue>();
      QLJS_ASSERT(this->num_children < MAX_CHILD_COUNT - 1);
      this->children[this->num_children++] = node;
      queue.push_back(node);
    }
  }
}
void ProdExpr::render(std::stringstream &out) {
  if (this->is_default) {
    out << "default";
    return;
  }
  if (byte < 128) {
    this->children[0]->render(out);
    this->children[1]->render(out);
    this->children[2]->render(out);
  } else if (byte < 256) {
    this->children[0]->render(out);
  }
}

void ProdValue::produce(uint8_t byte, quick_lint_js::Memory_Resource &memory,
                        std::vector<Node *> &queue) {
  this->byte = byte;
  if (byte < 64) {
  } else if (byte < 128) {
  } else if (byte < 192) {
  } else if (byte < 256) {
  }
}
void ProdValue::render(std::stringstream &out) {
  if (this->is_default) {
    out << "default";
    return;
  }
  if (byte < 64) {
    out << "1";
  } else if (byte < 128) {
    out << "\"String\"";
  } else if (byte < 192) {
    out << "true";
  } else if (byte < 256) {
    out << "3.";
    out << "141";
  }
}

void ProdOperator::produce(uint8_t byte, quick_lint_js::Memory_Resource &memory,
                           std::vector<Node *> &queue) {
  this->byte = byte;
  if (byte < 256) {
  }
}
void ProdOperator::render(std::stringstream &out) {
  if (this->is_default) {
    out << "default";
    return;
  }
  if (byte < 256) {
    out << "+";
  }
}
