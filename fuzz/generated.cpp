/************************************************/
/* This file was autogenerated by create_cpp.py */
/************************************************/


#include "generated.h"


#define MAX_CHILD_COUNT 3


#include <iostream>


void ProducerStmtList::produce(uint8_t byte, quick_lint_js::Memory_Resource &memory, std::vector<Node *> &queue) {
this->byte = byte;
std::cout << "byte " << (int)byte << " consumed in ProducerStmtList" << std::endl;
if (byte < 128) {
{
ProducerStmt *node = memory.new_object<ProducerStmt>();
QLJS_ASSERT(this->num_children < MAX_CHILD_COUNT);
this->children[this->num_children++] = node;
queue.push_back(node);
}
{
ProducerStmtList *node = memory.new_object<ProducerStmtList>();
QLJS_ASSERT(this->num_children < MAX_CHILD_COUNT);
this->children[this->num_children++] = node;
queue.push_back(node);
}
}
else
if (byte < 256) {
{
ProducerStmt *node = memory.new_object<ProducerStmt>();
QLJS_ASSERT(this->num_children < MAX_CHILD_COUNT);
this->children[this->num_children++] = node;
queue.push_back(node);
}
}
}
void ProducerStmtList::render(std::stringstream &out) {

        if (this->is_default) {
            out << "default";
            return;
        }
if (byte < 128) {
this->children[0]->render(out);
this->children[1]->render(out);
}
else
if (byte < 256) {
this->children[0]->render(out);
}
}



void ProducerStmt::produce(uint8_t byte, quick_lint_js::Memory_Resource &memory, std::vector<Node *> &queue) {
this->byte = byte;
std::cout << "byte " << (int)byte << " consumed in ProducerStmt" << std::endl;
if (byte < 256) {
{
ProducerExpr *node = memory.new_object<ProducerExpr>();
QLJS_ASSERT(this->num_children < MAX_CHILD_COUNT);
this->children[this->num_children++] = node;
queue.push_back(node);
}
}
}
void ProducerStmt::render(std::stringstream &out) {

        if (this->is_default) {
            out << "default";
            return;
        }
if (byte < 256) {
this->children[0]->render(out);
out << ";\n";
}
}



void ProducerExpr::produce(uint8_t byte, quick_lint_js::Memory_Resource &memory, std::vector<Node *> &queue) {
this->byte = byte;
std::cout << "byte " << (int)byte << " consumed in ProducerExpr" << std::endl;
if (byte < 128) {
{
ProducerValue *node = memory.new_object<ProducerValue>();
QLJS_ASSERT(this->num_children < MAX_CHILD_COUNT);
this->children[this->num_children++] = node;
queue.push_back(node);
}
{
ProducerOperator *node = memory.new_object<ProducerOperator>();
QLJS_ASSERT(this->num_children < MAX_CHILD_COUNT);
this->children[this->num_children++] = node;
queue.push_back(node);
}
{
ProducerValue *node = memory.new_object<ProducerValue>();
QLJS_ASSERT(this->num_children < MAX_CHILD_COUNT);
this->children[this->num_children++] = node;
queue.push_back(node);
}
}
else
if (byte < 256) {
{
ProducerValue *node = memory.new_object<ProducerValue>();
QLJS_ASSERT(this->num_children < MAX_CHILD_COUNT);
this->children[this->num_children++] = node;
queue.push_back(node);
}
}
}
void ProducerExpr::render(std::stringstream &out) {

        if (this->is_default) {
            out << "default";
            return;
        }
if (byte < 128) {
this->children[0]->render(out);
this->children[1]->render(out);
this->children[2]->render(out);
}
else
if (byte < 256) {
this->children[0]->render(out);
}
}



void ProducerValue::produce(uint8_t byte, quick_lint_js::Memory_Resource &memory, std::vector<Node *> &queue) {
this->byte = byte;
std::cout << "byte " << (int)byte << " consumed in ProducerValue" << std::endl;
if (byte < 64) {
}
else
if (byte < 128) {
}
else
if (byte < 192) {
}
else
if (byte < 256) {
}
}
void ProducerValue::render(std::stringstream &out) {

        if (this->is_default) {
            out << "default";
            return;
        }
if (byte < 64) {
out << "1";
}
else
if (byte < 128) {
out << "\"String\"";
}
else
if (byte < 192) {
out << "true";
}
else
if (byte < 256) {
out << "3.";
out << "141";
}
}



void ProducerOperator::produce(uint8_t byte, quick_lint_js::Memory_Resource &memory, std::vector<Node *> &queue) {
this->byte = byte;
std::cout << "byte " << (int)byte << " consumed in ProducerOperator" << std::endl;
if (byte < 256) {
}
}
void ProducerOperator::render(std::stringstream &out) {

        if (this->is_default) {
            out << "default";
            return;
        }
if (byte < 256) {
out << "+";
}
}


